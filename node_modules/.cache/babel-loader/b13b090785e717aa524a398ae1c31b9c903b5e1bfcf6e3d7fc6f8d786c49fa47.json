{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\eec\\\\optihome-frontend\\\\src\\\\components\\\\EnergyReports.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst EnergyReports = () => {\n  _s();\n  const [energyData, setEnergyData] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [deviceEnergyData, setDeviceEnergyData] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n\n  // Fetch energy data and recommendations from the backend\n  useEffect(() => {\n    const fetchEnergyData = async () => {\n      try {\n        const energyResponse = await axios.get('http://localhost:5000/energy');\n        setEnergyData(energyResponse.data);\n        const recommendationsResponse = await axios.get('http://localhost:5000/recommendations');\n        setRecommendations(recommendationsResponse.data);\n      } catch (error) {\n        console.error('Error fetching energy data or recommendations:', error);\n      }\n    };\n    fetchEnergyData();\n  }, []);\n\n  // Fetch device energy data when selectedDevice changes\n  useEffect(() => {\n    if (selectedDevice) {\n      const fetchDeviceEnergyData = async () => {\n        try {\n          const response = await axios.get('http://localhost:5000/device-energy');\n          setDeviceEnergyData(response.data);\n        } catch (error) {\n          console.error('Error fetching device energy data:', error);\n        }\n      };\n      fetchDeviceEnergyData();\n    }\n  }, [selectedDevice]);\n\n  // Prepare data for the chart\n  const chartData = {\n    labels: energyData.map(data => data.date),\n    datasets: [{\n      label: 'Energy Consumption (kWh)',\n      data: energyData.map(data => data.consumption),\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  };\n  const deviceChartData = {\n    labels: deviceEnergyData.map(device => device.name),\n    datasets: [{\n      label: 'Device Energy Consumption (kWh)',\n      data: deviceEnergyData.map(device => device.consumption),\n      backgroundColor: 'rgba(153, 102, 255, 0.6)',\n      borderColor: 'rgba(153, 102, 255, 1)',\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Energy Reports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      onClick: (event, elements) => {\n        if (elements.length > 0) {\n          // Handle the click event\n          // For example, you might want to set the selected device based on the click\n          // Assuming you have some logic to determine which device was clicked\n          setSelectedDevice(someDeviceId);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), selectedDevice && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Device Energy Consumption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: deviceChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Energy Saving Recommendations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recommendations.map((rec, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: rec\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(EnergyReports, \"d4K6T2M8rgi9gZSKeyOhwgWc+jk=\");\n_c = EnergyReports;\nexport default EnergyReports;\nvar _c;\n$RefreshReg$(_c, \"EnergyReports\");","map":{"version":3,"names":["React","useEffect","useState","axios","Bar","Chart","registerables","jsxDEV","_jsxDEV","Fragment","_Fragment","register","EnergyReports","_s","energyData","setEnergyData","recommendations","setRecommendations","deviceEnergyData","setDeviceEnergyData","selectedDevice","setSelectedDevice","fetchEnergyData","energyResponse","get","data","recommendationsResponse","error","console","fetchDeviceEnergyData","response","chartData","labels","map","date","datasets","label","consumption","backgroundColor","borderColor","borderWidth","deviceChartData","device","name","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","event","elements","length","someDeviceId","rec","index","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/eec/optihome-frontend/src/components/EnergyReports.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nconst EnergyReports = () => {\r\n  const [energyData, setEnergyData] = useState([]);\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [deviceEnergyData, setDeviceEnergyData] = useState([]);\r\n  const [selectedDevice, setSelectedDevice] = useState(null);\r\n\r\n  // Fetch energy data and recommendations from the backend\r\n  useEffect(() => {\r\n    const fetchEnergyData = async () => {\r\n      try {\r\n        const energyResponse = await axios.get('http://localhost:5000/energy');\r\n        setEnergyData(energyResponse.data);\r\n\r\n        const recommendationsResponse = await axios.get('http://localhost:5000/recommendations');\r\n        setRecommendations(recommendationsResponse.data);\r\n      } catch (error) {\r\n        console.error('Error fetching energy data or recommendations:', error);\r\n      }\r\n    };\r\n\r\n    fetchEnergyData();\r\n  }, []);\r\n\r\n  // Fetch device energy data when selectedDevice changes\r\n  useEffect(() => {\r\n    if (selectedDevice) {\r\n      const fetchDeviceEnergyData = async () => {\r\n        try {\r\n          const response = await axios.get('http://localhost:5000/device-energy');\r\n          setDeviceEnergyData(response.data);\r\n        } catch (error) {\r\n          console.error('Error fetching device energy data:', error);\r\n        }\r\n      };\r\n\r\n      fetchDeviceEnergyData();\r\n    }\r\n  }, [selectedDevice]);\r\n\r\n  // Prepare data for the chart\r\n  const chartData = {\r\n    labels: energyData.map((data) => data.date),\r\n    datasets: [\r\n      {\r\n        label: 'Energy Consumption (kWh)',\r\n        data: energyData.map((data) => data.consumption),\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const deviceChartData = {\r\n    labels: deviceEnergyData.map((device) => device.name),\r\n    datasets: [\r\n      {\r\n        label: 'Device Energy Consumption (kWh)',\r\n        data: deviceEnergyData.map((device) => device.consumption),\r\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n        borderColor: 'rgba(153, 102, 255, 1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Energy Reports</h2>\r\n      <Bar \r\n        data={chartData}\r\n        onClick={(event, elements) => {\r\n          if (elements.length > 0) {\r\n            // Handle the click event\r\n            // For example, you might want to set the selected device based on the click\r\n            // Assuming you have some logic to determine which device was clicked\r\n            setSelectedDevice(someDeviceId);\r\n          }\r\n        }}\r\n      />\r\n      {selectedDevice && (\r\n        <>\r\n          <h3>Device Energy Consumption</h3>\r\n          <Bar data={deviceChartData} />\r\n        </>\r\n      )}\r\n      <h3>Energy Saving Recommendations</h3>\r\n      <ul>\r\n        {recommendations.map((rec, index) => (\r\n          <li key={index}>{rec}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnergyReports;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}